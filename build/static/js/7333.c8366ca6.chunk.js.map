{"version":3,"file":"static/js/7333.c8366ca6.chunk.js","mappings":"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","sources":["views/app-views/stadium/StadiumInfo.js","views/app-views/stadium/index.js"],"sourcesContent":["import React from \"react\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { Input, Row, Col, Card, Form, Upload, InputNumber, Button } from \"antd\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { t } from \"i18next\"\r\nimport { UploadOutlined } from \"@ant-design/icons\"\r\nimport { ImageSvg } from \"assets/svg/icon\"\r\nimport VideoImage from \"assets/svg/video.png\"\r\nimport CustomIcon from \"components/util-components/CustomIcon\"\r\nconst { TextArea } = Input\r\n\r\nconst imageUploadProps = {\r\n  name: \"file\",\r\n  multiple: false,\r\n  listType: \"picture\",\r\n  showUploadList: true,\r\n}\r\n\r\nconst StadiumInfo = (props) => {\r\n  const { stadium } = useSelector((state) => state.stadium)\r\n\r\n  const dateFormat = \"YYYY-MM-DD\"\r\n  const { mode } = props\r\n  const { t } = useTranslation()\r\n  const dispatch = useDispatch()\r\n\r\n  const [fileList, setFileList] = useState([])\r\n  const [defaultLogoFile, setDefaultLogoFile] = useState([])\r\n  const [uploading, setUploading] = useState(false)\r\n\r\n  const propss = {\r\n    onRemove: (file) => {\r\n      const index = fileList.indexOf(file)\r\n      const newFileList = fileList.slice()\r\n      newFileList.splice(index, 1)\r\n      setFileList(newFileList)\r\n    },\r\n    beforeUpload: (file) => {\r\n      setFileList([...fileList, file])\r\n      return false\r\n    },\r\n    fileList,\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Row gutter={16} align=\"middle\">\r\n        <Col xs={24} sm={24} md={24}>\r\n          <Card>\r\n            <Row gutter={16}>\r\n              <Col xs={24} sm={24} md={12}>\r\n                <Form.Item\r\n                  name=\"stadiumName\"\r\n                  label={t(\"Stadium name\")}\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: t(\"Required stadiumName\"),\r\n                    },\r\n                  ]}\r\n                >\r\n                  <Input />\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} sm={24} md={12}>\r\n                <Form.Item name=\"location\" label={t(\"Location\")}>\r\n                  <Input />\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} sm={24} md={12}>\r\n                <Form.Item\r\n                  name=\"stadiumCapacity\"\r\n                  label={t(\"Capacity\")}\r\n                  rules={[\r\n                    {\r\n                      required: \"true\",\r\n                      message: \"Required capacity\",\r\n                    },\r\n                  ]}\r\n                >\r\n                  <InputNumber style={{ width: \"100%\" }} />\r\n                </Form.Item>\r\n              </Col>\r\n              <Col xs={24} sm={24} md={12}>\r\n                <Form.Item name=\"stadiumLawn\" label={t(\"GPS location\")}>\r\n                  <Input />\r\n                </Form.Item>\r\n              </Col>\r\n\r\n              {/* <Col xs={24} sm={24} md={12}>\r\n                <Form.Item name=\"stadiumFieldSize\" label={t(\"Field size\")}>\r\n                  <InputNumber style={{ width: \"100%\" }} />\r\n                </Form.Item>\r\n              </Col> */}\r\n              {/* \r\n              <Col xs={24} sm={24} md={12}>\r\n                <Form.Item name=\"architect\" label={t(\"Architect\")}>\r\n                  <Input />\r\n                </Form.Item>\r\n              </Col> */}\r\n\r\n              <Col xs={24} sm={24} md={12}>\r\n                <Form.Item name=\"totalSurface\" label={t(\"Total area\")}>\r\n                  <InputNumber style={{ width: \"100%\" }} />\r\n                </Form.Item>\r\n              </Col>\r\n              {/* <Col xs={24} sm={24} md={12}>\r\n                <Form.Item name=\"builder\" label={t(\"Builder\")}>\r\n                  <Input />\r\n                </Form.Item>\r\n              </Col> */}\r\n            </Row>\r\n\r\n            {/* <Form.Item name=\"tenant\" label={t(\"Tenant\")}>\r\n              <Input />\r\n            </Form.Item> */}\r\n\r\n            {/* <Form.Item label={t(\"Stadium image\")} name=\"stadiumImage\">\r\n              <Dragger\r\n                {...imageUploadProps}\r\n                beforeUpload={(file) => {\r\n                  console.log(file);\r\n                  return false;\r\n                }}\r\n                // onChange={(e) => props.handleUploadChange(e)}\r\n              >\r\n                {props.uploadedImg ? (\r\n                  <img\r\n                    src={props.uploadedImg}\r\n                    alt=\"avatar\"\r\n                    className=\"img-fluid\"\r\n                  />\r\n                ) : (\r\n                  <div>\r\n                    {props.uploadLoading ? (\r\n                      <div>\r\n                        <LoadingOutlined className=\"font-size-xxl text-primary\" />\r\n                        <div className=\"mt-3\">{t(\"file.uploading\")} </div>\r\n                      </div>\r\n                    ) : (\r\n                      <div>\r\n                        <CustomIcon className=\"display-3\" svg={ImageSvg} />\r\n                        <p>\r\n                          {t(\r\n                            \"actualite.addAndModify.step1.ProfilePicCard.message\",\r\n                          )}\r\n                        </p>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </Dragger>\r\n            </Form.Item> */}\r\n\r\n            <Form.Item\r\n              initialValue={defaultLogoFile}\r\n              label={t(\"Stadium image\")}\r\n              name=\"stadiumImage\"\r\n              // rules={rules.image}\r\n              valuePropName=\"fileList\"\r\n              getValueFromEvent={(e) => e.fileList}\r\n            >\r\n              <Upload\r\n                listType=\"picture\"\r\n                name=\"image\"\r\n                accept=\"image/*\"\r\n                maxCount={1}\r\n                // name=\"stadiumeImage\"\r\n                {...propss}\r\n                className=\"custom-upload\"\r\n              >\r\n                <Button icon={<UploadOutlined />}>{t(\"Add an image\")}</Button>\r\n              </Upload>\r\n            </Form.Item>\r\n            <Form.Item\r\n              label={t(\"Description\")}\r\n              name=\"description\"\r\n              rules={[\r\n                {\r\n                  required: \"true\",\r\n                  message: t(\"Required description\"),\r\n                },\r\n                {\r\n                  min: 80,\r\n                  message: t(\"Description must be at least 80 characters\"),\r\n                },\r\n              ]}\r\n            >\r\n              <TextArea rows={4} />\r\n            </Form.Item>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StadiumInfo\r\n","import React, { useState, useEffect } from \"react\"\r\nimport PageHeaderAlt from \"components/layout-components/PageHeaderAlt\"\r\nimport { Form, Button, message as AntMessage, Select, Space } from \"antd\"\r\nimport Flex from \"components/shared-components/Flex\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { t } from \"i18next\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport StadiumInfo from \"./StadiumInfo\"\r\nimport { IMAGE_URL } from \"constants/imageUrl\"\r\nimport {\r\n  createStadium,\r\n  fetchStadium,\r\n  hideLoading,\r\n  showLoading,\r\n  updateStadium,\r\n} from \"store/slices/stadiumSlice\"\r\n\r\nconst { Option } = Select\r\n\r\nconst getBase64 = (img, callback) => {\r\n  const reader = new FileReader()\r\n  reader.addEventListener(\"load\", () => callback(reader.result))\r\n  reader.readAsDataURL(img)\r\n}\r\n\r\nconst ADD = \"ADD\"\r\nconst EDIT = \"EDIT\"\r\n\r\nconst Stadium = (props) => {\r\n  const { mode = ADD } = props\r\n  const navigate = useNavigate()\r\n  const dispatch = useDispatch()\r\n  const { t } = useTranslation()\r\n  const [form] = Form.useForm()\r\n\r\n  const [uploadLoading, setUploadLoading] = useState(false)\r\n  const [submitLoading, setSubmitLoading] = useState(false)\r\n  const { id } = useParams()\r\n  const { error, stadium, loading } = useSelector((state) => state.stadium)\r\n\r\n  const back = () => {\r\n    navigate(-1)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        dispatch(fetchStadium())\r\n      } catch (error) {\r\n        console.error(\r\n          \"Erreur lors de la récupération des données du stade\",\r\n          error\r\n        )\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [dispatch])\r\n\r\n  //   useEffect(() => {\r\n\r\n  //     form.setFieldsValue({ ...stadium})\r\n\r\n  // },[stadium]);\r\n\r\n  useEffect(() => {\r\n    if (stadium && stadium[0]) {\r\n      const fileList = [\r\n        {\r\n          uid: \"-1\",\r\n          name: stadium[0].stadiumImage[0].originalname,\r\n          status: \"done\",\r\n          url: `${IMAGE_URL + stadium[0].stadiumImage[0].filename}`,\r\n        },\r\n      ]\r\n\r\n      form.setFieldsValue({\r\n        stadiumName: stadium[0].stadiumName,\r\n        location: stadium[0].location,\r\n        stadiumCapacity: stadium[0].stadiumCapacity,\r\n        stadiumLawn: stadium[0].gps,\r\n        stadiumFieldSize: stadium[0].stadiumFieldSize,\r\n        architect: stadium[0].architect,\r\n        totalSurface: stadium[0].totalSurface,\r\n        builder: stadium[0].builder,\r\n        tenant: stadium[0].tenant,\r\n        description: stadium[0].description,\r\n        stadiumImage: fileList,\r\n      })\r\n    }\r\n  }, [stadium, form])\r\n\r\n  const onFinish = async (values) => {\r\n    try {\r\n      const values = await form.validateFields()\r\n      const modifiedValues = {\r\n        ...values,\r\n      }\r\n      const formData = new FormData()\r\n\r\n      // Append the values to the formData\r\n      formData.append(\"location\", values.location)\r\n      formData.append(\"stadiumName\", values.stadiumName)\r\n      formData.append(\"stadiumCapacity\", values.stadiumCapacity)\r\n\r\n      formData.append(\"gps\", values.stadiumLawn)\r\n      // formData.append(\"numberOfGoals\", values.numberOfGoals);\r\n      formData.append(\"stadiumFieldSize\", values.stadiumFieldSize)\r\n      formData.append(\"architect\", values.architect)\r\n      formData.append(\"totalSurface\", values.totalSurface)\r\n      formData.append(\"builder\", values.builder)\r\n      formData.append(\"tenant\", values.tenant)\r\n      formData.append(\"description\", values.description)\r\n\r\n      if (values.stadiumImage && values.stadiumImage[0]) {\r\n        formData.append(\"stadiumImage\", values.stadiumImage[0].originFileObj)\r\n      }\r\n\r\n      if (stadium.length === 0) {\r\n        // Si le stade n'existe pas, créez-le\r\n        await dispatch(createStadium(formData))\r\n        AntMessage.success(t(\"Stadium added successfully!\"), 5)\r\n      } else {\r\n        // Si le stade existe, mettez à jour les données\r\n        await dispatch(updateStadium({ updatedStadiumData: formData }))\r\n        AntMessage.success(t(\"Stadium updated successfully!\"), 5)\r\n\r\n        // navigate(0);\r\n      }\r\n    } catch (error) {\r\n      //AntMessage.error(error)\r\n    } finally {\r\n      dispatch(hideLoading())\r\n    }\r\n  }\r\n\r\n  const [initVal, setinitVal] = useState(null)\r\n\r\n  return (\r\n    <>\r\n      <Form\r\n        layout=\"vertical\"\r\n        form={form}\r\n        onFinish={onFinish}\r\n        name=\"stadium-form\"\r\n        className=\"ant-advanced-search-form\"\r\n        initialValues={initVal}\r\n      >\r\n        <PageHeaderAlt className=\"border-bottom mb-4\">\r\n          <div className=\"container\">\r\n            <Flex\r\n              mobileFlex={false}\r\n              justifyContent=\"between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <div>\r\n                <h2 className=\"mb-3\" style={{ display: \"inline-block\" }}>\r\n                  {mode === \"ADD\"\r\n                    ? t(\"Stadium info\")\r\n                    : t(\"stadium.modifyStadium.title\")}\r\n                </h2>\r\n              </div>\r\n            </Flex>\r\n            {/* <CustomBreadCrumb /> */}\r\n          </div>\r\n        </PageHeaderAlt>\r\n        <div className=\"container\">\r\n          <StadiumInfo\r\n            // uploadedImg={stadium[0].stadiumImage}\r\n            uploadLoading={uploadLoading}\r\n            // handleUploadChange={handleUploadChange}\r\n            mode={mode}\r\n          />\r\n        </div>\r\n        <Flex justifyContent=\"center\">\r\n          <Space size=\"middle\" className=\"mb-3\">\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              {mode === \"ADD\"\r\n                ? t(\"actualite.addNews.addButton\")\r\n                : t(\"actualite.modifyNews.modifyButton\")}\r\n            </Button>\r\n            <Button className=\"mr-2\" onClick={back}>\r\n              {t(\"actualite.addNews.cancelButton\")}\r\n            </Button>\r\n          </Space>\r\n        </Flex>\r\n      </Form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Stadium\r\n"],"names":["TextArea","Input","props","stadium","useSelector","state","mode","t","useTranslation","fileList","setFileList","useDispatch","useState","defaultLogoFile","setDefaultLogoFile","uploading","setUploading","propss","onRemove","file","index","indexOf","newFileList","slice","splice","beforeUpload","_jsx","children","Row","gutter","align","Col","xs","sm","md","_jsxs","Card","Form","Item","name","label","rules","required","message","InputNumber","style","width","initialValue","valuePropName","getValueFromEvent","e","Upload","listType","accept","maxCount","className","Button","icon","UploadOutlined","min","rows","Option","Select","ADD","navigate","useNavigate","dispatch","form","useForm","uploadLoading","setUploadLoading","submitLoading","setSubmitLoading","id","useParams","error","loading","useEffect","async","fetchStadium","console","fetchData","uid","stadiumImage","originalname","status","url","concat","IMAGE_URL","filename","setFieldsValue","stadiumName","location","stadiumCapacity","stadiumLawn","gps","stadiumFieldSize","architect","totalSurface","builder","tenant","description","initVal","setinitVal","_Fragment","layout","onFinish","values","validateFields","formData","FormData","append","originFileObj","length","createStadium","AntMessage","success","updateStadium","updatedStadiumData","hideLoading","initialValues","PageHeaderAlt","Flex","mobileFlex","justifyContent","alignItems","display","StadiumInfo","Space","size","type","htmlType","onClick","back"],"sourceRoot":""}